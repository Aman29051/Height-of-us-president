name: Branch validation

on:
  pull_request_review:
    types: [submitted]

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Validate deployment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const changedFiles = files.map(f => f.filename);
            console.log("Changed files:", changedFiles);

            // Check if kustomization.yaml in staging/prod changed
            const targetFile = changedFiles.find(f => 
              f === "staging/kustomization.yaml" || f === "prod/kustomization.yaml"
            );

            let versionPart = null;

            if (targetFile) {
              console.log(`Found change in ${targetFile}, extracting newTag...`);

              // Get file content
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: targetFile,
                ref: pr.head.sha
              });

              const content = Buffer.from(file.content, file.encoding).toString("utf8");

              // Extract newTag values (YAML parsing via regex)
              const tagRegex = /newTag:\s*([^\s]+)/g;
              let match;
              while ((match = tagRegex.exec(content)) !== null) {
                versionPart = match[1]; // take the last newTag
              }

              console.log("Extracted newTag:", versionPart);
            }

            // If no kustomization.yaml change, return
            if (!versionPart) {
              console.log("No kustomization.yaml change");
              return;
            }

            // Validate versionPart
            console.log("Version Part for validation:", versionPart);
            const parts = versionPart.split("_");
            const tagName = parts[0];

            // Check if this is a special deployment
            const isSpecialDeployment = tagName.match(/^(v|V)0\.0\.0-.+-v\d+(\.\d+)?$/) && targetFile === "staging/kustomization.yaml";
            const tagRegex = new RegExp("^(v|V)\\d+\\.\\d+\\.\\d+([-_].*)?$");            

            if (tagRegex.test(tagName) && !isSpecialDeployment) {
              console.log("✅ Valid tag format");
              return;
            }
          
            // Check approvals
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const latestReviews = {};
            reviews.forEach(review => {
              if (!latestReviews[review.user.login] || new Date(review.submitted_at) > new Date(latestReviews[review.user.login].submitted_at)) {
                latestReviews[review.user.login] = review;
              }
            });
            
            const approvals = Object.values(latestReviews).filter(r => r.state === 'APPROVED').length;
            
            let comment;
            if (isSpecialDeployment) {
              if (approvals >= 2) {
                comment = `🚀 **Special deployment approved for ${tagName}** (${approvals}/2 approvals)\n- Special deployment to staging environment`;
              } else {
                comment = `⚡ **Special deployment detected: ${tagName}**\n- Special deployment to staging environment\n- Can not proceed without 2 approvals (${approvals}/2)`;
              }
            } else {
              if (approvals >= 2) {
                comment = `✅ **${tagName} deployment approved** (${approvals}/2 approvals)`;
              } else {
                comment = `⚠️ **Deployment detected: ${tagName}**\n- Requires 2 approvals (${approvals}/2)`;
              }
            }
            
            // Update existing comment or create new
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            
            const existing = comments.find(c => 
              c.user.login === 'github-actions[bot]' && 
              (c.body.includes('Main branch') || c.body.includes('Invalid branch') || c.body.includes('branch deployment') || c.body.includes("deployment approved") || c.body.includes("Special deployment"))
            );
            
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });
            }
            
            if (approvals < 2 && isSpecialDeployment) {
              core.setFailed(`${tagName} deployment requires 2 approvals (${approvals}/2)`);
            }
